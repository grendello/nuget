//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NuGet.Common {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class NuGetResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal NuGetResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("NuGet.Common.NuGetResources", typeof(NuGetResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ambiguous command &apos;{0}&apos;. Possible values: {1}..
        /// </summary>
        internal static string AmbiguousCommand {
            get {
                return ResourceManager.GetString("AmbiguousCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ambiguous option &apos;{0}&apos;. Possible values: {1}..
        /// </summary>
        internal static string AmbiguousOption {
            get {
                return ResourceManager.GetString("AmbiguousOption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Building project for target framework &apos;{0}&apos;..
        /// </summary>
        internal static string BuildingProjectTargetingFramework {
            get {
                return ResourceManager.GetString("BuildingProjectTargetingFramework", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} (y/N) .
        /// </summary>
        internal static string ConsoleConfirmMessage {
            get {
                return ResourceManager.GetString("ConsoleConfirmMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to y.
        /// </summary>
        internal static string ConsoleConfirmMessageAccept {
            get {
                return ResourceManager.GetString("ConsoleConfirmMessageAccept", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No description was provided for this command..
        /// </summary>
        internal static string DefaultCommandDescription {
            get {
                return ResourceManager.GetString("DefaultCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to the symbol server.
        /// </summary>
        internal static string DefaultSymbolServer {
            get {
                return ResourceManager.GetString("DefaultSymbolServer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delete canceled.
        /// </summary>
        internal static string DeleteCommandCanceled {
            get {
                return ResourceManager.GetString("DeleteCommandCanceled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} {1} will be deleted from the server. Would you like to continue?.
        /// </summary>
        internal static string DeleteCommandConfirm {
            get {
                return ResourceManager.GetString("DeleteCommandConfirm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} {1} was deleted from the server.
        /// </summary>
        internal static string DeleteCommandDeletedPackage {
            get {
                return ResourceManager.GetString("DeleteCommandDeletedPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deleting {0} {1} from the server..
        /// </summary>
        internal static string DeleteCommandDeletingPackage {
            get {
                return ResourceManager.GetString("DeleteCommandDeletingPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deletes a package from the server..
        /// </summary>
        internal static string DeleteCommandDescription {
            get {
                return ResourceManager.GetString("DeleteCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not prompt when deleting..
        /// </summary>
        internal static string DeleteCommandNoPromptDescription {
            get {
                return ResourceManager.GetString("DeleteCommandNoPromptDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the base GalleryServer Url..
        /// </summary>
        internal static string DeleteCommandSourceDescription {
            get {
                return ResourceManager.GetString("DeleteCommandSourceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the Id and version of the package to delete from the server..
        /// </summary>
        internal static string DeleteCommandUsageDescription {
            get {
                return ResourceManager.GetString("DeleteCommandUsageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;Package Id&gt; &lt;Package Version&gt; &lt;API Key&gt; [options].
        /// </summary>
        internal static string DeleteCommandUsageSummary {
            get {
                return ResourceManager.GetString("DeleteCommandUsageSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to build &apos;{0}&apos;..
        /// </summary>
        internal static string FailedToBuildProject {
            get {
                return ResourceManager.GetString("FailedToBuildProject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Help command displays general help information and help information about other commands..
        /// </summary>
        internal static string HelpCommandDescription {
            get {
                return ResourceManager.GetString("HelpCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pass a command name to display help information for that command..
        /// </summary>
        internal static string HelpCommandUsageDecription {
            get {
                return ResourceManager.GetString("HelpCommandUsageDecription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [command].
        /// </summary>
        internal static string HelpCommandUsageSummary {
            get {
                return ResourceManager.GetString("HelpCommandUsageSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Install a package from a given source. If no source is specified the default feed is used..
        /// </summary>
        internal static string InstallCommandDescription {
            get {
                return ResourceManager.GetString("InstallCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If set, the destination folder will contain only the package name, not the version number.
        /// </summary>
        internal static string InstallCommandExcludeVersionDescription {
            get {
                return ResourceManager.GetString("InstallCommandExcludeVersionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All packages listed in {0} are already installed..
        /// </summary>
        internal static string InstallCommandNothingToInstall {
            get {
                return ResourceManager.GetString("InstallCommandNothingToInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the directory in which packages will be installed.
        /// </summary>
        internal static string InstallCommandOutputDirDescription {
            get {
                return ResourceManager.GetString("InstallCommandOutputDirDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The location to look for packages..
        /// </summary>
        internal static string InstallCommandSourceDescription {
            get {
                return ResourceManager.GetString("InstallCommandSourceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the id and optionally the version of the package to install. If a path to a packages.config file is used instead of an id, all the packages it contains are installed..
        /// </summary>
        internal static string InstallCommandUsageDescription {
            get {
                return ResourceManager.GetString("InstallCommandUsageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to packageId|pathToPackagesConfig [options].
        /// </summary>
        internal static string InstallCommandUsageSummary {
            get {
                return ResourceManager.GetString("InstallCommandUsageSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The version of the package to install..
        /// </summary>
        internal static string InstallCommandVersionDescription {
            get {
                return ResourceManager.GetString("InstallCommandVersionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}: invalid arguments..
        /// </summary>
        internal static string InvalidArguments {
            get {
                return ResourceManager.GetString("InvalidArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid option value: &apos;{0} {1}&apos;.
        /// </summary>
        internal static string InvalidOptionValueError {
            get {
                return ResourceManager.GetString("InvalidOptionValueError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List all versions of a package. By default, only the latest package version is displayed..
        /// </summary>
        internal static string ListCommandAllVersionsDescription {
            get {
                return ResourceManager.GetString("ListCommandAllVersionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified source &apos;{0}&apos; is invalid. Please provide a valid source..
        /// </summary>
        internal static string InvalidSource {
            get {
                return ResourceManager.GetString("InvalidSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Displays a list of packages at a given source. If no source is specified the default feed is used..
        /// </summary>
        internal static string ListCommandDescription {
            get {
                return ResourceManager.GetString("ListCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No packages found..
        /// </summary>
        internal static string ListCommandNoPackages {
            get {
                return ResourceManager.GetString("ListCommandNoPackages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The location to look for packages..
        /// </summary>
        internal static string ListCommandSourceDescription {
            get {
                return ResourceManager.GetString("ListCommandSourceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify optional search terms..
        /// </summary>
        internal static string ListCommandUsageDescription {
            get {
                return ResourceManager.GetString("ListCommandUsageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [search terms] [options].
        /// </summary>
        internal static string ListCommandUsageSummary {
            get {
                return ResourceManager.GetString("ListCommandUsageSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Displays a detailed list of information for each package..
        /// </summary>
        internal static string ListCommandVerboseListDescription {
            get {
                return ResourceManager.GetString("ListCommandVerboseListDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to the NuGet gallery feed.
        /// </summary>
        internal static string LiveFeed {
            get {
                return ResourceManager.GetString("LiveFeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing option value for: &apos;{0}&apos;.
        /// </summary>
        internal static string MissingOptionValueError {
            get {
                return ResourceManager.GetString("MissingOptionValueError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No API Key was provided and no API Key could be found for {0}. To save an API Key for a source use the &apos;SetApiKey&apos; command..
        /// </summary>
        internal static string NoApiKeyFound {
            get {
                return ResourceManager.GetString("NoApiKeyFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [option] on &apos;{0}&apos; is invalid without a setter..
        /// </summary>
        internal static string OptionInvalidWithoutSetter {
            get {
                return ResourceManager.GetString("OptionInvalidWithoutSetter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Added file &apos;{0}&apos;..
        /// </summary>
        internal static string PackageCommandAddedFile {
            get {
                return ResourceManager.GetString("PackageCommandAddedFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempting to build package from &apos;{0}&apos;..
        /// </summary>
        internal static string PackageCommandAttemptingToBuildPackage {
            get {
                return ResourceManager.GetString("PackageCommandAttemptingToBuildPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempting to build symbols package for &apos;{0}&apos;..
        /// </summary>
        internal static string PackageCommandAttemptingToBuildSymbolsPackage {
            get {
                return ResourceManager.GetString("PackageCommandAttemptingToBuildSymbolsPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Base Path of the files defined in the nuspec file..
        /// </summary>
        internal static string PackageCommandBasePathDescription {
            get {
                return ResourceManager.GetString("PackageCommandBasePathDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines what configuration should be used when building a package from the specified project file..
        /// </summary>
        internal static string PackageCommandConfigurationDescription {
            get {
                return ResourceManager.GetString("PackageCommandConfigurationDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creates a NuGet package based on the specified nuspec or project file..
        /// </summary>
        internal static string PackageCommandDescription {
            get {
                return ResourceManager.GetString("PackageCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies one or more wildcard patterns to exclude when creating a package..
        /// </summary>
        internal static string PackageCommandExcludeDescription {
            get {
                return ResourceManager.GetString("PackageCommandExcludeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prevent default exclusion of .nupkg files and files and folders starting with a dot e.g. .svn..
        /// </summary>
        internal static string PackageCommandNoDefaultExcludes {
            get {
                return ResourceManager.GetString("PackageCommandNoDefaultExcludes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the directory for the created NuGet package file.
        /// </summary>
        internal static string PackageCommandOutputDirDescription {
            get {
                return ResourceManager.GetString("PackageCommandOutputDirDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please specify a nuspec or project file to use..
        /// </summary>
        internal static string PackageCommandSpecifyInputFileError {
            get {
                return ResourceManager.GetString("PackageCommandSpecifyInputFileError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Successfully created package &apos;{0}&apos;..
        /// </summary>
        internal static string PackageCommandSuccess {
            get {
                return ResourceManager.GetString("PackageCommandSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines if a package containing sources and symbols should be created. Only valid when building a package from a project..
        /// </summary>
        internal static string PackageCommandSymbolsDescription {
            get {
                return ResourceManager.GetString("PackageCommandSymbolsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines if the output files of the project should be in the tool folder. .
        /// </summary>
        internal static string PackageCommandToolDescription {
            get {
                return ResourceManager.GetString("PackageCommandToolDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the location of the manifest (Nuspec) file to create a package..
        /// </summary>
        internal static string PackageCommandUsageDescription {
            get {
                return ResourceManager.GetString("PackageCommandUsageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;manifest&gt; [options].
        /// </summary>
        internal static string PackageCommandUsageSummary {
            get {
                return ResourceManager.GetString("PackageCommandUsageSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shows verbose output for package building..
        /// </summary>
        internal static string PackageCommandVerboseDescription {
            get {
                return ResourceManager.GetString("PackageCommandVerboseDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overrides the Version number from the nuspec file..
        /// </summary>
        internal static string PackageCommandVersionDescription {
            get {
                return ResourceManager.GetString("PackageCommandVersionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Packing files from &apos;{0}&apos;..
        /// </summary>
        internal static string PackagingFilesFromOutputPath {
            get {
                return ResourceManager.GetString("PackagingFilesFromOutputPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Publishes a package that was uploaded to the server but not added to the live feed..
        /// </summary>
        internal static string PublishCommandDescription {
            get {
                return ResourceManager.GetString("PublishCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your package was published..
        /// </summary>
        internal static string PublishCommandPackagePublished {
            get {
                return ResourceManager.GetString("PublishCommandPackagePublished", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Publishing {0} {1} to {2}....
        /// </summary>
        internal static string PublishCommandPublishingPackage {
            get {
                return ResourceManager.GetString("PublishCommandPublishingPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the base GalleryServer Url..
        /// </summary>
        internal static string PublishCommandSourceDescription {
            get {
                return ResourceManager.GetString("PublishCommandSourceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the Id and Version of the package that will be publised to the live feed..
        /// </summary>
        internal static string PublishCommandUsageDescription {
            get {
                return ResourceManager.GetString("PublishCommandUsageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;Package Id&gt; &lt;Package Version&gt; &lt;API Key&gt; [options].
        /// </summary>
        internal static string PublishCommandUsageSummary {
            get {
                return ResourceManager.GetString("PublishCommandUsageSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies if the package should be created and uploaded to the server but not published to the live feed. False by default..
        /// </summary>
        internal static string PushCommandCreateOnlyDescription {
            get {
                return ResourceManager.GetString("PushCommandCreateOnlyDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pushes a package to the server and optionally publish it to the feed..
        /// </summary>
        internal static string PushCommandDescription {
            get {
                return ResourceManager.GetString("PushCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}: {1}.
        /// </summary>
        internal static string PushCommandInvalidResponse {
            get {
                return ResourceManager.GetString("PushCommandInvalidResponse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no default source, please specify a source..
        /// </summary>
        internal static string PushCommandNoSourceError {
            get {
                return ResourceManager.GetString("PushCommandNoSourceError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your package was uploaded to &apos;{0}&apos; but not published..
        /// </summary>
        internal static string PushCommandPackageCreated {
            get {
                return ResourceManager.GetString("PushCommandPackageCreated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pushing {0} to {1}....
        /// </summary>
        internal static string PushCommandPushingPackage {
            get {
                return ResourceManager.GetString("PushCommandPushingPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the base GalleryServer Url..
        /// </summary>
        internal static string PushCommandSourceDescription {
            get {
                return ResourceManager.GetString("PushCommandSourceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the location of the package and your API key to push the package to the server..
        /// </summary>
        internal static string PushCommandUsageDescription {
            get {
                return ResourceManager.GetString("PushCommandUsageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;package location&gt; [API key] [options].
        /// </summary>
        internal static string PushCommandUsageSummary {
            get {
                return ResourceManager.GetString("PushCommandUsageSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resource type &apos;{0}&apos; does not have an accessible get for the &apos;{1}&apos; property..
        /// </summary>
        internal static string ResourcePropertyDoesNotHaveAccessibleGet {
            get {
                return ResourceManager.GetString("ResourcePropertyDoesNotHaveAccessibleGet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{0}&apos; on resource type &apos;{1}&apos; is not a string type..
        /// </summary>
        internal static string ResourcePropertyNotStringType {
            get {
                return ResourceManager.GetString("ResourcePropertyNotStringType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resource type &apos;{0}&apos; does not have an accessible static property named &apos;{1}&apos;..
        /// </summary>
        internal static string ResourceTypeDoesNotHaveProperty {
            get {
                return ResourceManager.GetString("ResourceTypeDoesNotHaveProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The API Key &apos;{0}&apos; was saved for {1}..
        /// </summary>
        internal static string SetApiKeyCommandApiKeySaved {
            get {
                return ResourceManager.GetString("SetApiKeyCommandApiKeySaved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The API Key &apos;{0}&apos; was saved for {1} and {2}..
        /// </summary>
        internal static string SetApiKeyCommandDefaultApiKeysSaved {
            get {
                return ResourceManager.GetString("SetApiKeyCommandDefaultApiKeysSaved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Saves an API key for a given Gallery Server URL, when no URL is provided API key is saved for the default source..
        /// </summary>
        internal static string SetApiKeyCommandDescription {
            get {
                return ResourceManager.GetString("SetApiKeyCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Base URL to the Gallery Server where the API Key is valid..
        /// </summary>
        internal static string SetApiKeyCommandSourceDescription {
            get {
                return ResourceManager.GetString("SetApiKeyCommandSourceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sets the API key for the default symbol server..
        /// </summary>
        internal static string SetApiKeyCommandSymbolsDescription {
            get {
                return ResourceManager.GetString("SetApiKeyCommandSymbolsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the API key to save and an optional URL to the Gallery Server that provided the API key..
        /// </summary>
        internal static string SetApiKeyCommandUsageDescription {
            get {
                return ResourceManager.GetString("SetApiKeyCommandUsageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;API key&gt; [Source].
        /// </summary>
        internal static string SetApiKeyCommandUsageSummary {
            get {
                return ResourceManager.GetString("SetApiKeyCommandUsageSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly to use for metadata..
        /// </summary>
        internal static string SpecCommandAssemblyPathDescription {
            get {
                return ResourceManager.GetString("SpecCommandAssemblyPathDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Created &apos;{0}&apos; successfully..
        /// </summary>
        internal static string SpecCommandCreatedNuSpec {
            get {
                return ResourceManager.GetString("SpecCommandCreatedNuSpec", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generates a nuspec for a new package..
        /// </summary>
        internal static string SpecCommandDescription {
            get {
                return ResourceManager.GetString("SpecCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; already exists, use -f to overwrite it..
        /// </summary>
        internal static string SpecCommandFileExists {
            get {
                return ResourceManager.GetString("SpecCommandFileExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overwrite nuspec file if it exists..
        /// </summary>
        internal static string SpecCommandForceDescription {
            get {
                return ResourceManager.GetString("SpecCommandForceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [packageid].
        /// </summary>
        internal static string SpecCommandUsageSummary {
            get {
                return ResourceManager.GetString("SpecCommandUsageSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to change from type &apos;{0}&apos; to &apos;{1}&apos;..
        /// </summary>
        internal static string UnableToConvertTypeError {
            get {
                return ResourceManager.GetString("UnableToConvertTypeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to extract metadata from &apos;{0}&apos;..
        /// </summary>
        internal static string UnableToExtractAssemblyMetadata {
            get {
                return ResourceManager.GetString("UnableToExtractAssemblyMetadata", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown command: &apos;{0}&apos;.
        /// </summary>
        internal static string UnknowCommandError {
            get {
                return ResourceManager.GetString("UnknowCommandError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown option: &apos;{0}&apos;.
        /// </summary>
        internal static string UnknownOptionError {
            get {
                return ResourceManager.GetString("UnknownOptionError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checking for updates from {0}..
        /// </summary>
        internal static string UpdateCommandCheckingForUpdates {
            get {
                return ResourceManager.GetString("UpdateCommandCheckingForUpdates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Currently running NuGet.exe {0}..
        /// </summary>
        internal static string UpdateCommandCurrentlyRunningNuGetExe {
            get {
                return ResourceManager.GetString("UpdateCommandCurrentlyRunningNuGetExe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update the running NuGet.exe to the newest version available from the server..
        /// </summary>
        internal static string UpdateCommandDescription {
            get {
                return ResourceManager.GetString("UpdateCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NuGet.exe is up to date..
        /// </summary>
        internal static string UpdateCommandNuGetUpToDate {
            get {
                return ResourceManager.GetString("UpdateCommandNuGetUpToDate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find &apos;{0}&apos; package..
        /// </summary>
        internal static string UpdateCommandUnableToFindPackage {
            get {
                return ResourceManager.GetString("UpdateCommandUnableToFindPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid NuGet.CommandLine package. Unable to locate NuGet.exe within the package..
        /// </summary>
        internal static string UpdateCommandUnableToLocateNuGetExe {
            get {
                return ResourceManager.GetString("UpdateCommandUnableToLocateNuGetExe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update successful..
        /// </summary>
        internal static string UpdateCommandUpdateSuccessful {
            get {
                return ResourceManager.GetString("UpdateCommandUpdateSuccessful", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Updating NuGet.exe to {0}..
        /// </summary>
        internal static string UpdateCommandUpdatingNuGet {
            get {
                return ResourceManager.GetString("UpdateCommandUpdatingNuGet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using &apos;{0}&apos; for metadata..
        /// </summary>
        internal static string UsingNuspecForMetadata {
            get {
                return ResourceManager.GetString("UsingNuspecForMetadata", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found packages.config. Using packages listed as dependencies.
        /// </summary>
        internal static string UsingPackagesConfigForDependencies {
            get {
                return ResourceManager.GetString("UsingPackagesConfigForDependencies", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; was included in the project but doesn&apos;t exist. Skipping....
        /// </summary>
        internal static string Warning_FileDoesNotExist {
            get {
                return ResourceManager.GetString("Warning_FileDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found symbols package &apos;{0}&apos;, but no API key was specified for the symbol server. To save an API Key, run &apos;nuget.exe SetApiKey [your API key from http://www.nuget.org]&apos;..
        /// </summary>
        internal static string Warning_SymbolServerNotConfigured {
            get {
                return ResourceManager.GetString("Warning_SymbolServerNotConfigured", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} was not specified. Using &apos;{1}&apos;..
        /// </summary>
        internal static string Warning_UnspecifiedField {
            get {
                return ResourceManager.GetString("Warning_UnspecifiedField", resourceCulture);
            }
        }
    }
}