<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DeleteCommandDeletedPackage" xml:space="preserve">
    <value>{0} {1} was deleted from the server</value>
  </data>
  <data name="DeleteCommandDeletingPackage" xml:space="preserve">
    <value>Deleting {0} {1} from the server.</value>
  </data>
  <data name="DeleteCommandDescription" xml:space="preserve">
    <value>Deletes a package from the server.</value>
  </data>
  <data name="DeleteCommandSourceDescription" xml:space="preserve">
    <value>Specifies the base GalleryServer Url.</value>
  </data>
  <data name="DeleteCommandUsageDescription" xml:space="preserve">
    <value>Specify the Id and version of the package to delete from the server.</value>
  </data>
  <data name="DeleteCommandUsageSummary" xml:space="preserve">
    <value>&lt;Package Id&gt; &lt;Package Version&gt; &lt;API Key&gt; [options]</value>
  </data>
  <data name="HelpCommandDescription" xml:space="preserve">
    <value>The Help command displays general help information and help information about other commands.</value>
  </data>
  <data name="HelpCommandUsageDecription" xml:space="preserve">
    <value>Pass a command name to display help information for that command.</value>
  </data>
  <data name="HelpCommandUsageSummary" xml:space="preserve">
    <value>[command]</value>
  </data>
  <data name="InvalidOptionValueError" xml:space="preserve">
    <value>Invalid option value: '{0} {1}'</value>
  </data>
  <data name="ListCommandDescription" xml:space="preserve">
    <value>Displays a list of packages at a given source. If no source is specified the default feed is used.</value>
  </data>
  <data name="ListCommandNoPackages" xml:space="preserve">
    <value>No packages found.</value>
  </data>
  <data name="ListCommandSourceDescription" xml:space="preserve">
    <value>The location to look for packages.</value>
  </data>
  <data name="ListCommandUsageDescription" xml:space="preserve">
    <value>Specify optional search terms.</value>
  </data>
  <data name="ListCommandUsageSummary" xml:space="preserve">
    <value>[search terms] [options]</value>
  </data>
  <data name="ListCommandVerboseListDescription" xml:space="preserve">
    <value>Displays a detailed list of information for each package.</value>
  </data>
  <data name="InstallCommandDescription" xml:space="preserve">
    <value>Install a package from a given source. If no source is specified the default feed is used.</value>
  </data>
  <data name="InstallCommandVersionDescription" xml:space="preserve">
    <value>The version of the package to install.</value>
  </data>
  <data name="InstallCommandSourceDescription" xml:space="preserve">
    <value>The location to look for packages.</value>
  </data>
  <data name="InstallCommandUsageDescription" xml:space="preserve">
    <value>Specify the id and optionally the version of the package to install. If a path to a packages.config file is used instead of an id, all the packages it contains are installed.</value>
  </data>
  <data name="InstallCommandUsageSummary" xml:space="preserve">
    <value>packageId|pathToPackagesConfig [options]</value>
  </data>
  <data name="MissingOptionValueError" xml:space="preserve">
    <value>Missing option value for: '{0}'</value>
  </data>
  <data name="OptionInvalidWithoutSetter" xml:space="preserve">
    <value>[option] on '{0}' is invalid without a setter.</value>
  </data>
  <data name="PackageCommandBasePathDescription" xml:space="preserve">
    <value>The Base Path of the files defined in the nuspec file.</value>
  </data>
  <data name="PackageCommandDescription" xml:space="preserve">
    <value>Creates a NuGet package based on the specified nuspec or project file.</value>
  </data>
  <data name="PackageCommandOutputDirDescription" xml:space="preserve">
    <value>Specifies the directory for the created NuGet package file</value>
  </data>
  <data name="PackageCommandSpecifyInputFileError" xml:space="preserve">
    <value>Please specify a nuspec or project file to use.</value>
  </data>
  <data name="PackageCommandSuccess" xml:space="preserve">
    <value>Successfully created package '{0}'.</value>
  </data>
  <data name="PackageCommandUsageDescription" xml:space="preserve">
    <value>Specify the location of the manifest (Nuspec) file to create a package.</value>
  </data>
  <data name="PackageCommandUsageSummary" xml:space="preserve">
    <value>&lt;manifest&gt; [options]</value>
  </data>
  <data name="PublishCommandDescription" xml:space="preserve">
    <value>Publishes a package that was uploaded to the server but not added to the live feed.</value>
  </data>
  <data name="PublishCommandPackagePublished" xml:space="preserve">
    <value>Your package was published.</value>
  </data>
  <data name="PublishCommandPublishingPackage" xml:space="preserve">
    <value>Publishing {0} {1} to {2}...</value>
  </data>
  <data name="PublishCommandSourceDescription" xml:space="preserve">
    <value>Specifies the base GalleryServer Url.</value>
  </data>
  <data name="PublishCommandUsageDescription" xml:space="preserve">
    <value>Specify the Id and Version of the package that will be publised to the live feed.</value>
  </data>
  <data name="PublishCommandUsageSummary" xml:space="preserve">
    <value>&lt;Package Id&gt; &lt;Package Version&gt; &lt;API Key&gt; [options]</value>
  </data>
  <data name="PushCommandPushingPackage" xml:space="preserve">
    <value>Pushing {0} to {1}...</value>
  </data>
  <data name="PushCommandDescription" xml:space="preserve">
    <value>Pushes a package to the server and optionally publish it to the feed.</value>
  </data>
  <data name="PushCommandInvalidResponse" xml:space="preserve">
    <value>{0}: {1}</value>
  </data>
  <data name="PushCommandNoSourceError" xml:space="preserve">
    <value>There is no default source, please specify a source.</value>
  </data>
  <data name="PushCommandPackageCreated" xml:space="preserve">
    <value>Your package was uploaded to '{0}' but not published.</value>
  </data>
  <data name="PushCommandCreateOnlyDescription" xml:space="preserve">
    <value>Specifies if the package should be created and uploaded to the server but not published to the live feed. False by default.</value>
  </data>
  <data name="PushCommandSourceDescription" xml:space="preserve">
    <value>Specifies the base GalleryServer Url.</value>
  </data>
  <data name="PushCommandUsageDescription" xml:space="preserve">
    <value>Specify the location of the package and your API key to push the package to the server.</value>
  </data>
  <data name="PushCommandUsageSummary" xml:space="preserve">
    <value>&lt;package location&gt; [API key] [options]</value>
  </data>
  <data name="ResourcePropertyDoesNotHaveAccessibleGet" xml:space="preserve">
    <value>The resource type '{0}' does not have an accessible get for the '{1}' property.</value>
  </data>
  <data name="ResourcePropertyNotStringType" xml:space="preserve">
    <value>The property '{0}' on resource type '{1}' is not a string type.</value>
  </data>
  <data name="ResourceTypeDoesNotHaveProperty" xml:space="preserve">
    <value>The resource type '{0}' does not have an accessible static property named '{1}'.</value>
  </data>
  <data name="UnableToConvertTypeError" xml:space="preserve">
    <value>Unable to change from type '{0}' to '{1}'.</value>
  </data>
  <data name="UnknowCommandError" xml:space="preserve">
    <value>Unknown command: '{0}'</value>
  </data>
  <data name="UnknownOptionError" xml:space="preserve">
    <value>Unknown option: '{0}'</value>
  </data>
  <data name="UpdateCommandCheckingForUpdates" xml:space="preserve">
    <value>Checking for updates from {0}.</value>
  </data>
  <data name="UpdateCommandCurrentlyRunningNuGetExe" xml:space="preserve">
    <value>Currently running NuGet.exe {0}.</value>
  </data>
  <data name="UpdateCommandDescription" xml:space="preserve">
    <value>Update the running NuGet.exe to the newest version available from the server.</value>
  </data>
  <data name="UpdateCommandNuGetUpToDate" xml:space="preserve">
    <value>NuGet.exe is up to date.</value>
  </data>
  <data name="UpdateCommandUnableToFindPackage" xml:space="preserve">
    <value>Unable to find '{0}' package.</value>
  </data>
  <data name="UpdateCommandUnableToLocateNuGetExe" xml:space="preserve">
    <value>Invalid NuGet.CommandLine package. Unable to locate NuGet.exe within the package.</value>
  </data>
  <data name="UpdateCommandUpdateSuccessful" xml:space="preserve">
    <value>Update successful.</value>
  </data>
  <data name="UpdateCommandUpdatingNuGet" xml:space="preserve">
    <value>Updating NuGet.exe to {0}.</value>
  </data>
  <data name="InvalidArguments" xml:space="preserve">
    <value>{0}: invalid arguments.</value>
  </data>
  <data name="PackageCommandAddedFile" xml:space="preserve">
    <value>Added file '{0}'.</value>
  </data>
  <data name="PackageCommandAttemptingToBuildPackage" xml:space="preserve">
    <value>Attempting to build package from '{0}'.</value>
  </data>
  <data name="PackageCommandVerboseDescription" xml:space="preserve">
    <value>Shows verbose output for package building.</value>
  </data>
  <data name="SpecCommandAssemblyPathDescription" xml:space="preserve">
    <value>Assembly to use for metadata.</value>
  </data>
  <data name="SpecCommandCreatedNuSpec" xml:space="preserve">
    <value>Created '{0}' successfully.</value>
  </data>
  <data name="SpecCommandDescription" xml:space="preserve">
    <value>Generates a nuspec for a new package.</value>
  </data>
  <data name="SpecCommandForceDescription" xml:space="preserve">
    <value>Overwrite nuspec file if it exists.</value>
  </data>
  <data name="SpecCommandFileExists" xml:space="preserve">
    <value>'{0}' already exists, use -f to overwrite it.</value>
  </data>
  <data name="DefaultCommandDescription" xml:space="preserve">
    <value>No description was provided for this command.</value>
  </data>
  <data name="ConsoleConfirmMessage" xml:space="preserve">
    <value>{0} (y/N) </value>
  </data>
  <data name="ConsoleConfirmMessageAccept" xml:space="preserve">
    <value>y</value>
  </data>
  <data name="DeleteCommandCanceled" xml:space="preserve">
    <value>Delete canceled</value>
  </data>
  <data name="DeleteCommandConfirm" xml:space="preserve">
    <value>{0} {1} will be deleted from the server. Would you like to continue?</value>
  </data>
  <data name="DeleteCommandNoPromptDescription" xml:space="preserve">
    <value>Do not prompt when deleting.</value>
  </data>
  <data name="InstallCommandExcludeVersionDescription" xml:space="preserve">
    <value>If set, the destination folder will contain only the package name, not the version number</value>
  </data>
  <data name="AmbiguousCommand" xml:space="preserve">
    <value>Ambiguous command '{0}'. Possible values: {1}.</value>
  </data>
  <data name="AmbiguousOption" xml:space="preserve">
    <value>Ambiguous option '{0}'. Possible values: {1}.</value>
  </data>
  <data name="PackageCommandVersionDescription" xml:space="preserve">
    <value>Overrides the Version number from the nuspec file.</value>
  </data>
  <data name="PackageCommandExcludeDescription" xml:space="preserve">
    <value>Specifies one or more wildcard patterns to exclude when creating a package.</value>
  </data>
  <data name="InstallCommandOutputDirDescription" xml:space="preserve">
    <value>Specifies the directory in which packages will be installed</value>
  </data>
  <data name="InstallCommandNothingToInstall" xml:space="preserve">
    <value>All packages listed in {0} are already installed.</value>
  </data>
  <data name="NoApiKeyFound" xml:space="preserve">
    <value>No API Key was provided and no API Key could be found for {0}. To save an API Key for a source use the 'SetApiKey' command.</value>
  </data>
  <data name="SetApiKeyCommandApiKeySaved" xml:space="preserve">
    <value>The API Key '{0}' was saved for {1}.</value>
  </data>
  <data name="SetApiKeyCommandSourceDescription" xml:space="preserve">
    <value>Base URL to the Gallery Server where the API Key is valid.</value>
  </data>
  <data name="SetApiKeyCommandDescription" xml:space="preserve">
    <value>Saves an API key for a given Gallery Server URL, when no URL is provided API key is saved for the default source.</value>
  </data>
  <data name="SetApiKeyCommandUsageDescription" xml:space="preserve">
    <value>Specify the API key to save and an optional URL to the Gallery Server that provided the API key.</value>
  </data>
  <data name="SetApiKeyCommandUsageSummary" xml:space="preserve">
    <value>&lt;API key&gt; [Source]</value>
  </data>
  <data name="BuildingProjectTargetingFramework" xml:space="preserve">
    <value>Building project for target framework '{0}'.</value>
  </data>
  <data name="FailedToBuildProject" xml:space="preserve">
    <value>Failed to build '{0}'.</value>
  </data>
  <data name="PackageCommandConfigurationDescription" xml:space="preserve">
    <value>Determines what configuration should be used when building a package from the specified project file.</value>
  </data>
  <data name="PackageCommandSymbolsDescription" xml:space="preserve">
    <value>Determines if a package containing sources and symbols should be created. Only valid when building a package from a project.</value>
  </data>
  <data name="PackagingFilesFromOutputPath" xml:space="preserve">
    <value>Packing files from '{0}'.</value>
  </data>
  <data name="UnableToExtractAssemblyMetadata" xml:space="preserve">
    <value>Unable to extract metadata from '{0}'.</value>
  </data>
  <data name="UsingPackagesConfigForDependencies" xml:space="preserve">
    <value>Found packages.config. Using packages listed as dependencies</value>
  </data>
  <data name="Warning_FileDoesNotExist" xml:space="preserve">
    <value>'{0}' was included in the project but doesn't exist. Skipping...</value>
  </data>
  <data name="Warning_UnspecifiedField" xml:space="preserve">
    <value>{0} was not specified. Using '{1}'.</value>
  </data>
  <data name="PackageCommandNoDefaultExcludes" xml:space="preserve">
    <value>Prevent default exclusion of .nupkg files and files and folders starting with a dot e.g. .svn.</value>
  </data>
  <data name="PackageCommandToolDescription" xml:space="preserve">
    <value>Determines if the output files of the project should be in the tool folder. </value>
  </data>
  <data name="SetApiKeyCommandSymbolsDescription" xml:space="preserve">
    <value>Sets the API key for the default symbol server.</value>
  </data>
  <data name="DefaultSymbolServer" xml:space="preserve">
    <value>the symbol server</value>
  </data>
  <data name="LiveFeed" xml:space="preserve">
    <value>the NuGet gallery feed</value>
  </data>
  <data name="PackageCommandAttemptingToBuildSymbolsPackage" xml:space="preserve">
    <value>Attempting to build symbols package for '{0}'.</value>
  </data>
  <data name="Warning_SymbolServerNotConfigured" xml:space="preserve">
    <value>Found symbols package '{0}', but no API key was specified for the symbol server. To save an API Key, run 'nuget.exe SetApiKey [your API key from http://www.nuget.org]'.</value>
  </data>
  <data name="SpecCommandUsageSummary" xml:space="preserve">
    <value>[packageid]</value>
  </data>
  <data name="UsingNuspecForMetadata" xml:space="preserve">
    <value>Using '{0}' for metadata.</value>
  </data>
  <data name="ListCommandAllVersionsDescription" xml:space="preserve">
    <value>List all versions of a package. By default, only the latest package version is displayed.</value>
  </data>
  <data name="InvalidSource" xml:space="preserve">
    <value>The specified source '{0}' is invalid. Please provide a valid source.</value>
  </data>
  <data name="SetApiKeyCommandDefaultApiKeysSaved" xml:space="preserve">
    <value>The API Key '{0}' was saved for {1} and {2}.</value>
  </data>
</root>